<launch>
  <!--sim控制着是否为仿真环境，human控制着环境中是否有human-->
  <arg name="sim" default="false" />
  <arg name="human" default="false" />
  <!--加载robot_description参数-->
  <arg name="robot_description" default="robot_description"/>
  <group>
    <param unless="$(arg human)" name="$(arg robot_description)" command="$(find xacro)/xacro --inorder '$(find mm_rviz_sim)/urdf/ur5_agv_collision.xacro'" />
    <param if="$(arg human)" name="$(arg robot_description)" command="$(find xacro)/xacro --inorder '$(find mm_rviz_sim)/urdf/ur5_agv_collision_with_human.xacro'" />
  </group>
  <!--实际环境的控制器加载-->
  <group unless="$(arg sim)">
    <include file="$(find ur_modern_driver)/launch/ur5_bringup2.launch">
        <arg name="robot_ip" value="192.168.1.102"/>
        <arg name="joint_states_name" value="/joint_states"/> 
    </include>
    <node pkg="N_Robot_Topic" type="NMotionCtrl_X64_Topic" name="NMotionCtrl_X64_Topic" args="/dev/ttyUSB1" output="screen"/>
    <node pkg="robot_base_odometry" type="robot_base_odometry_node" name="robot_base_odometry_node" output="screen" />
    <node name="real_mm_joint_state_publisher" pkg="modified_tf" type="real_mm_joint_state_publisher"/>
  </group>
  <!--仿真环境的控制器加载-->
  <group if="$(arg sim)" ns="amm">
    <include file="$(find mm_rviz_sim)/launch/amm_pos_vel_controller.launch"/>
  </group>
  <group if="$(arg human)" ns="human">
    <include file="$(find mm_rviz_sim)/launch/human_pos_vel_controller.launch"/>
  </group>
  <group if="$(arg sim)">
    <node name="sim_joint_state_convert" pkg="modified_tf" type="sim_joint_state_convert" output="screen"/>
  </group>
  <param name="default_values/sim" value="$(arg sim)"/>
  <param name="default_values/human" value="$(arg human)"/>
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find mm_rviz_sim)/urdf.rviz" />
</launch>
